{"version":3,"sources":["redux/defaults.js","redux/store.js","redux/reducer.js","redux/actions.js","components/Sidenav.jsx","algorithms/bubble.js","algorithms/merge.js","algorithms/selection.js","algorithms/insertion.js","algorithms/quick.js","algorithms/counting.js","algorithms/generators.js","components/Nav.jsx","components/SortingVisualiser.jsx","components/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["getDefualtSpeed","x","localStorage","getItem","getDefualtSize","getDefualtAlgorithm","store","createStore","state","displayedArray","effects","size","algo","speed","sidenavOpen","action","payload","type","arr","toggle","window","__REDUX_DEVTOOLS_EXTENSION__","updateDisplayedArray","dispatch","updateEffects","updateSpeed","e","parseInt","target","value","setItem","updateAlgo","id","toggleSidenav","toggleNavSettings","elements","document","querySelectorAll","element","style","cssText","Sidenav","useSelector","className","width","onClick","name","onChange","htmlFor","min","max","defaultValue","updateSize","transform","opacity","pointerEvents","a","end","length","swapped","i","Promise","resolve","setTimeout","newBarEffects","temp","merge","l","m","r","n1","n2","L","R","j","k","curr_size","left_start","mid","Math","right_end","partition","b","p","quicksortrec","range","s","aux","generateArray","array","push","shuffle","randomIndex","currentIndex","floor","random","Nav","showNewArray","ceil","innerWidth","calcSize","bubblesort","mergesort","selectionsort","insertionsort","quicksort","countsort","withRouter","props","useState","barWidth","setBarWidth","useEffect","addEventListener","getElementById","checked","location","pathname","calcWidth","map","item","index","fraction","height","innerHeight","backgroundColor","display","Home","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e8bb7cdf.chunk.js","sourcesContent":["export function getDefualtSpeed() {\n  let x = localStorage.getItem(\"speed\");\n  if (!x) x = 50;\n  return x;\n}\n\nexport function getDefualtSize() {\n  let x = localStorage.getItem(\"size\");\n  if (!x) {\n    x = 75;\n    // x = Math.ceil((window.innerWidth * 0.45 * x) / 250);\n    // if (x < 10) x = 10;\n  }\n  return x;\n}\n\nexport function getDefualtAlgorithm() {\n  let x = localStorage.getItem(\"algorithm\");\n  if (!x) x = \"Bubble\";\n  return x;\n}\n","import { createStore } from \"redux\";\nimport reducer from \"./reducer\";\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n","import {\n  getDefualtSize,\n  getDefualtAlgorithm,\n  getDefualtSpeed,\n} from \"./defaults\";\n\nexport default function reducer(\n  state = {\n    displayedArray: [],\n    effects: {},\n    size: getDefualtSize(),\n    algo: getDefualtAlgorithm(),\n    speed: getDefualtSpeed(),\n    sidenavOpen: false,\n  },\n  action\n) {\n  const payload = action.payload;\n  switch (action.type) {\n    case \"UPDATE_DISPLAYED_ARRAY\":\n      state.displayedArray = payload.arr;\n      break;\n    case \"UPDATE_EFFECTS\":\n      state.effects = payload.effects;\n      break;\n    case \"UPDATE_SIZE\":\n      state.size = payload.size;\n      break;\n    case \"UPDATE_SPEED\":\n      state.speed = payload.speed;\n      break;\n    case \"UPDATE_ALGO\":\n      state.algo = payload.algo;\n      break;\n    case \"TOGGLE_SIDENAV\":\n      state.sidenavOpen = payload.toggle;\n      break;\n  }\n  return state;\n}\n","import store from \"./store\";\n\nexport function updateDisplayedArray(arr) {\n  store.dispatch({\n    type: \"UPDATE_DISPLAYED_ARRAY\",\n    payload: {\n      arr,\n    },\n  });\n}\n\nexport function updateEffects(effects) {\n  store.dispatch({\n    type: \"UPDATE_EFFECTS\",\n    payload: { effects },\n  });\n}\n\nexport function updateSize(size) {\n  localStorage.setItem(\"size\", size);\n  store.dispatch({\n    type: \"UPDATE_SIZE\",\n    payload: { size },\n  });\n}\n\nexport function updateSpeed(e) {\n  const speed = parseInt(e.target.value);\n  localStorage.setItem(\"speed\", speed);\n  store.dispatch({\n    type: \"UPDATE_SPEED\",\n    payload: { speed },\n  });\n}\n\nexport function updateAlgo(e) {\n  const algo = e.target.id;\n  localStorage.setItem(\"algorithm\", algo);\n  store.dispatch({\n    type: \"UPDATE_ALGO\",\n    payload: { algo },\n  });\n}\n\nexport function toggleSidenav(toggle) {\n  store.dispatch({\n    type: \"TOGGLE_SIDENAV\",\n    payload: { toggle },\n  });\n}\n","import React from \"react\";\nimport {\n  updateSize,\n  updateSpeed,\n  updateAlgo,\n  toggleSidenav,\n} from \"../redux/actions\";\nimport { useSelector } from \"react-redux\";\n\nexport function toggleNavSettings(toggle) {\n  const elements = document.querySelectorAll(\".nav-setting\");\n  for (let element of elements) {\n    if (toggle) element.style.cssText = \"color: black; pointer-events: auto;\";\n    else element.style.cssText = \"color: red !important; pointer-events: none;\";\n  }\n}\n\nconst Sidenav = () => {\n  const sidenavOpen = useSelector((state) => state.sidenavOpen);\n  const speed = useSelector((state) => state.speed);\n  const size = useSelector((state) => state.size);\n  const displayedArray = useSelector((state) => state.displayedArray);\n\n  return (\n    <div>\n      <div\n        className=\"sidenav\"\n        style={{\n          width: sidenavOpen ? \"275px\" : \"0px\",\n        }}\n      >\n        <div className=\"sidenav-toggle-container\">\n          <div\n            className=\"sidenav-toggle\"\n            onClick={() => toggleSidenav(false)}\n          />\n        </div>\n        <div>\n          <ul>\n            <h3>Sorting Algorithm</h3>\n            <li>\n              <input\n                type=\"radio\"\n                id=\"Bubble\"\n                name=\"sorting-algorithm\"\n                onChange={updateAlgo}\n              />\n              <label htmlFor=\"Bubble\">Bubble</label>\n            </li>\n            <li>\n              <input\n                type=\"radio\"\n                id=\"Merge\"\n                name=\"sorting-algorithm\"\n                onChange={updateAlgo}\n              />\n              <label htmlFor=\"Merge\">Merge</label>\n            </li>\n            <li>\n              <input\n                type=\"radio\"\n                id=\"Selection\"\n                name=\"sorting-algorithm\"\n                onChange={updateAlgo}\n              />\n              <label htmlFor=\"Selection\">Selection</label>\n            </li>\n            <li>\n              <input\n                type=\"radio\"\n                id=\"Insertion\"\n                name=\"sorting-algorithm\"\n                onChange={updateAlgo}\n              />\n              <label htmlFor=\"Insertion\">Insertion</label>\n            </li>\n            <li>\n              <input\n                type=\"radio\"\n                id=\"Quick\"\n                name=\"sorting-algorithm\"\n                onChange={updateAlgo}\n              />\n              <label htmlFor=\"Quick\">Quick</label>\n            </li>\n            <li>\n              <input\n                type=\"radio\"\n                id=\"Counting\"\n                name=\"sorting-algorithm\"\n                onChange={updateAlgo}\n              />\n              <label htmlFor=\"Counting\">Counting</label>\n            </li>\n          </ul>\n          <ul>\n            <li>\n              <div className=\"slider\">\n                <div>Array Size</div>\n                <input\n                  type=\"range\"\n                  min=\"1\"\n                  max=\"100\"\n                  defaultValue={size}\n                  onChange={(e) => {\n                    updateSize(parseInt(e.target.value), displayedArray);\n                  }}\n                />\n              </div>\n            </li>\n            <li>\n              <div className=\"slider\">\n                <div>Sorting Speed</div>\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"1000\"\n                  defaultValue={speed}\n                  style={{ transform: \"rotate(180deg)\" }}\n                  onChange={updateSpeed}\n                />\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div\n        className=\"sidenav-backdrop\"\n        style={{\n          opacity: sidenavOpen ? 0.75 : 0,\n          pointerEvents: sidenavOpen ? \"auto\" : \"none\",\n        }}\n        onClick={() => toggleSidenav(false)}\n      />\n    </div>\n  );\n};\n\nexport default Sidenav;\n","import { toggleNavSettings } from \"../components/Sidenav\";\nimport { updateDisplayedArray, updateEffects } from \"../redux/actions\";\n\nexport default async function bubblesort(arr, speed) {\n  let swapped;\n  let newBarEffects;\n  let end = arr.length - 1;\n  toggleNavSettings(false);\n  do {\n    swapped = false;\n    for (let i = 0; i < end; i++) {\n      await new Promise((resolve) => setTimeout(resolve, speed));\n      newBarEffects = {};\n      newBarEffects[i] = \"red\";\n      newBarEffects[i + 1] = \"red\";\n      updateEffects(newBarEffects);\n      if (arr[i] > arr[i + 1]) {\n        let temp = arr[i];\n        arr[i] = arr[i + 1];\n        arr[i + 1] = temp;\n        await new Promise((resolve) => setTimeout(resolve, speed));\n        newBarEffects = {};\n        newBarEffects[i] = \"lightgreen\";\n        newBarEffects[i + 1] = \"lightgreen\";\n        updateEffects(newBarEffects);\n        updateDisplayedArray(arr);\n        swapped = true;\n      }\n    }\n    end--;\n  } while (swapped);\n  updateEffects({});\n  toggleNavSettings(true);\n}\n","import { toggleNavSettings } from \"../components/Sidenav\";\nimport { updateDisplayedArray, updateEffects } from \"../redux/actions\";\n\nasync function merge(arr, speed, l, m, r) {\n  let newBarEffects = {};\n\n  let n1 = m - l + 1;\n  let n2 = r - m;\n\n  let L = [];\n  let R = [];\n\n  for (let i = 0; i < n1; i++) {\n    L[i] = arr[l + i];\n  }\n  for (let i = 0; i < n2; i++) {\n    R[i] = arr[m + 1 + i];\n  }\n\n  let i = 0;\n  let j = 0;\n  let k = l;\n\n  while (i < n1 && j < n2) {\n    newBarEffects = {};\n    newBarEffects[k + i] = \"red\";\n    newBarEffects[m + 1 + j] = \"red\";\n    await new Promise((resolve) => setTimeout(resolve, speed));\n    updateEffects(newBarEffects);\n    if (L[i] <= R[j]) {\n      arr[k] = L[i];\n      i++;\n    } else {\n      if (k <= r) {\n        let temp = arr[k];\n        arr[k] = R[j];\n        arr[m + 1 + j] = temp;\n      } else {\n        arr[k] = R[j];\n      }\n      j++;\n    }\n    newBarEffects = {};\n    newBarEffects[k] = \"lightgreen\";\n    await new Promise((resolve) => setTimeout(resolve, speed));\n    updateDisplayedArray([...arr]);\n    updateEffects(newBarEffects);\n    k++;\n  }\n\n  while (i < n1) {\n    arr[k] = L[i];\n    i++;\n    k++;\n  }\n  while (j < n2) {\n    arr[k] = R[j];\n    j++;\n    k++;\n  }\n}\n\nexport default async function mergesort(arr, speed) {\n  toggleNavSettings(false);\n  for (let curr_size = 1; curr_size < arr.length; curr_size *= 2) {\n    for (\n      let left_start = 0;\n      left_start < arr.length - 1;\n      left_start += 2 * curr_size\n    ) {\n      let mid = Math.min(left_start + curr_size - 1, arr.length - 1);\n      let right_end = Math.min(left_start + 2 * curr_size - 1, arr.length - 1);\n\n      await merge(arr, speed, left_start, mid, right_end);\n    }\n  }\n  updateDisplayedArray([...arr]);\n  updateEffects({});\n  toggleNavSettings(true);\n}\n","import { toggleNavSettings } from \"../components/Sidenav\";\nimport { updateDisplayedArray, updateEffects } from \"../redux/actions\";\n\nexport default async function selectionsort(arr, speed) {\n  toggleNavSettings(false);\n  let newBarEffects, temp;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[j] < arr[i]) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        await new Promise((resolve) => setTimeout(resolve, speed));\n        newBarEffects = {};\n        newBarEffects[i] = \"lightgreen\";\n        newBarEffects[j] = \"red\";\n        updateEffects(newBarEffects);\n        updateDisplayedArray(arr);\n      }\n    }\n  }\n  updateEffects({});\n  toggleNavSettings(true);\n}\n","import { toggleNavSettings } from \"../components/Sidenav\";\nimport { updateDisplayedArray, updateEffects } from \"../redux/actions\";\n\nexport default async function insertionsort(arr, speed) {\n  toggleNavSettings(false);\n  let newBarEffects, temp;\n\n  for (let i = 1; i < arr.length; i++) {\n    for (let j = i; j > 0; j--) {\n      await new Promise((resolve) => setTimeout(resolve, speed));\n      newBarEffects = {};\n      newBarEffects[j] = \"red\";\n      newBarEffects[j - 1] = \"red\";\n      updateEffects(newBarEffects);\n      if (arr[j - 1] > arr[j]) {\n        temp = arr[j - 1];\n        arr[j - 1] = arr[j];\n        arr[j] = temp;\n        await new Promise((resolve) => setTimeout(resolve, speed));\n        newBarEffects = {};\n        newBarEffects[j] = \"lightgreen\";\n        newBarEffects[j - 1] = \"lightgreen\";\n        updateEffects(newBarEffects);\n        updateDisplayedArray(arr);\n      } else break;\n    }\n  }\n  updateEffects({});\n  toggleNavSettings(true);\n}\n","import { toggleNavSettings } from \"../components/Sidenav\";\nimport { updateDisplayedArray, updateEffects } from \"../redux/actions\";\n\nasync function partition(arr, speed, l, r) {\n  let b = l - 1;\n  let p = arr[r];\n  let temp;\n  let newBarEffects = {};\n\n  for (let i = l; i <= r; i++) {\n    await new Promise((resolve) => setTimeout(resolve, speed));\n    newBarEffects = {};\n    newBarEffects[i] = \"red\";\n    newBarEffects[b] = \"red\";\n    newBarEffects[r] = \"red\";\n    updateEffects(newBarEffects);\n    if (arr[i] < p) {\n      b++;\n      temp = arr[b];\n      arr[b] = arr[i];\n      arr[i] = temp;\n      await new Promise((resolve) => setTimeout(resolve, speed));\n      newBarEffects = {};\n      newBarEffects[b] = \"lightgreen\";\n      newBarEffects[i] = \"lightgreen\";\n      updateEffects(newBarEffects);\n      updateDisplayedArray(arr);\n    }\n  }\n\n  await new Promise((resolve) => setTimeout(resolve, speed));\n  newBarEffects = {};\n  newBarEffects[b] = \"red\";\n  newBarEffects[r] = \"red\";\n  b++;\n  temp = arr[b];\n  arr[b] = arr[r];\n  arr[r] = temp;\n  await new Promise((resolve) => setTimeout(resolve, speed));\n  newBarEffects = {};\n  newBarEffects[b] = \"lightgreen\";\n  newBarEffects[r] = \"lightgreen\";\n  updateEffects(newBarEffects);\n  updateDisplayedArray(arr);\n  return b;\n}\n\nasync function quicksortrec(arr, speed, l, r) {\n  if (l >= r) return;\n\n  let b = await partition(arr, speed, l, r);\n  await quicksortrec(arr, speed, l, b - 1);\n  await quicksortrec(arr, speed, b + 1, r);\n}\n\nexport default async function quicksort(arr, speed) {\n  toggleNavSettings(false);\n\n  await quicksortrec(arr, speed, 0, arr.length - 1);\n\n  updateEffects({});\n  toggleNavSettings(true);\n}\n","import { toggleNavSettings } from \"../components/Sidenav\";\nimport { updateDisplayedArray, updateEffects } from \"../redux/actions\";\n\nexport default async function countsort(arr, speed) {\n  toggleNavSettings(false);\n  let newBarEffects = {};\n\n  let size = arr.length;\n  let range = arr.length + 1;\n  let s = 0;\n\n  let aux = [];\n  for (let i = 0; i < range; i++) aux[i] = 0;\n\n  for (let i = 0; i < size; i++) {\n    aux[arr[i]] += 1;\n    await new Promise((resolve) => setTimeout(resolve, speed));\n    newBarEffects = {};\n    newBarEffects[i] = \"red\";\n    updateEffects(newBarEffects);\n  }\n\n  for (let i = 0; i < range; i++) {\n    for (let j = 0; j < aux[i]; j++) {\n      arr[s] = i;\n      s++;\n      await new Promise((resolve) => setTimeout(resolve, speed));\n      newBarEffects = {};\n      newBarEffects[s] = \"green\";\n      updateEffects(newBarEffects);\n      updateDisplayedArray(arr);\n    }\n  }\n\n  updateEffects({});\n  toggleNavSettings(true);\n}\n","export function generateArray(size) {\n  const array = [];\n  for (let i = 1; i <= size; i++) {\n    array.push(i);\n  }\n  return array;\n}\n\nexport function shuffle(array) {\n  let currentIndex = array.length,\n    randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n\n  return array;\n}\n","import React from \"react\";\nimport { toggleSidenav, updateDisplayedArray } from \"../redux/actions\";\nimport { useSelector } from \"react-redux\";\nimport bubblesort from \"../algorithms/bubble\";\nimport mergesort from \"../algorithms/merge\";\nimport selectionsort from \"../algorithms/selection\";\nimport insertionsort from \"../algorithms/insertion\";\nimport quicksort from \"../algorithms/quick\";\nimport countsort from \"../algorithms/counting\";\nimport { generateArray, shuffle } from \"../algorithms/generators\";\n\nconst Nav = () => {\n  const displayedArray = useSelector((state) => state.displayedArray);\n  const algo = useSelector((state) => state.algo);\n  const speed = useSelector((state) => state.speed);\n  const size = useSelector((state) => state.size);\n\n  function sort() {\n    switch (algo) {\n      case \"Bubble\":\n        return bubblesort(displayedArray, speed);\n      case \"Merge\":\n        return mergesort(displayedArray, speed);\n      case \"Selection\":\n        return selectionsort(displayedArray, speed);\n      case \"Insertion\":\n        return insertionsort(displayedArray, speed);\n      case \"Quick\":\n        return quicksort(displayedArray, speed);\n      case \"Counting\":\n        return countsort(displayedArray, speed);\n    }\n  }\n\n  function showNewArray() {\n    updateDisplayedArray(shuffle(generateArray(calcSize())));\n  }\n\n  function calcSize() {\n    let x = Math.ceil((window.innerWidth * 0.45 * size) / 250);\n    if (x < 10) x = 10;\n    return x;\n  }\n\n  return (\n    <div className=\"nav\">\n      <div>\n        <ul>\n          <li>\n            <span className=\"nav-setting\" onClick={() => toggleSidenav(true)}>\n              Algorithm: {algo} Sort\n            </span>\n          </li>\n          <li>\n            <span className=\"nav-setting\" onClick={() => toggleSidenav(true)}>\n              Settings\n            </span>\n          </li>\n          <li>\n            <span\n              className=\"nav-setting\"\n              onClick={() => {\n                showNewArray();\n              }}\n            >\n              Generate New Array\n            </span>\n          </li>\n          <li>\n            <span className=\"nav-setting\" onClick={sort}>\n              Sort!\n            </span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Nav;\n","import React, { useEffect, useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { generateArray, shuffle } from \"../algorithms/generators\";\nimport { useSelector } from \"react-redux\";\nimport { updateDisplayedArray } from \"../redux/actions\";\n\nconst SortingVisualiser = (props) => {\n  const displayedArray = useSelector((state) => state.displayedArray);\n  const effects = useSelector((state) => state.effects);\n  const size = useSelector((state) => state.size);\n  const algo = useSelector((state) => state.algo);\n  const [barWidth, setBarWidth] = useState();\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", () => {\n      showNewArray();\n    });\n    document.getElementById(algo).checked = true;\n  }, [props.location.pathname]);\n\n  useEffect(() => {\n    if (displayedArray.length === 0) {\n      showNewArray();\n    }\n  });\n\n  useEffect(() => {\n    showNewArray();\n  }, [size]);\n\n  useEffect(() => {\n    calcWidth();\n  }, [displayedArray.length]);\n\n  function showNewArray() {\n    updateDisplayedArray(shuffle(generateArray(calcSize())));\n  }\n\n  function calcSize() {\n    let x = Math.ceil((window.innerWidth * 0.45 * size) / 250);\n    if (x < 10) x = 10;\n    return x;\n  }\n\n  function calcWidth() {\n    const x = window.innerWidth / displayedArray.length;\n    setBarWidth(x);\n  }\n\n  function mapArray() {\n    return displayedArray.map((item, index) => {\n      let fraction = item / displayedArray.length;\n      return (\n        <li\n          key={index}\n          id={`sorting-visualiser-array-item-${index}`}\n          style={{\n            height: `${window.innerHeight * 0.6 * fraction + 50}px`,\n            width: `${barWidth}px`,\n            backgroundColor: effects[index],\n          }}\n        >\n          <div style={{ display: barWidth > 30 ? \"block\" : \"none\" }}>\n            {item}\n          </div>\n        </li>\n      );\n    });\n  }\n\n  return (\n    <>\n      <h1 className=\"sorting-visualiser-header\">{algo}</h1>\n      <ul className=\"sorting-visualiser\">{mapArray()}</ul>\n    </>\n  );\n};\n\nexport default withRouter(SortingVisualiser);\n","import React from \"react\";\nimport Nav from \"./Nav\";\nimport Sidenav from \"./Sidenav\";\nimport SortingVisualiser from \"./SortingVisualiser\";\n\nconst Home = () => {\n  return (\n    <>\n      <Nav />\n      <Sidenav />\n      <SortingVisualiser />\n    </>\n  );\n};\n\nexport default Home;\n","import { Switch, Route } from \"react-router-dom\";\nimport Home from \"./components/Home\";\n\nconst App = () => {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n    </Switch>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./styles/index.css\";\nimport \"./styles/sidenav.css\";\nimport \"./styles/nav.css\";\nimport \"./styles/sortingVisualiser.css\";\nimport \"./styles/slider.css\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}